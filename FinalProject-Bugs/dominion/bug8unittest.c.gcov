        -:    0:Source:bug8unittest.c
        -:    0:Graph:bug8unittest.gcno
        -:    0:Data:bug8unittest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
function assertCoins called 1 returned 100% blocks executed 80%
        -:   11:void assertCoins (int coinStorage, int currentCoin) {
        -:   12:
        -:   13:    // Assertion
        1:   14:    if (currentCoin == coinStorage) {
branch  0 taken 100%
branch  1 taken 0%
        1:   15:        printf("Coins are correctly calculated for current player! No errors.\n\n");
        1:   16:    }
        -:   17:
        -:   18:    else {
    #####:   19:        printf("Coins are incorrectly calculated for current player! Error detected -- player has wrong number of coins.\n\n");
        -:   20:    }
        1:   21:}
        -:   22:
        -:   23:
        -:   24:
        -:   25:
function main called 1 returned 100% blocks executed 100%
        -:   26:int main () {
        -:   27:
        1:   28:printf("/****************************************\n");
        1:   29:printf("/***********   BUG 8 TEST   *************\n");
        1:   30:printf("/****************************************\n");
        -:   31:
        1:   32:int currentPlayer = 0;
        -:   33:
        -:   34:struct gameState G;
        -:   35:
        1:   36:int * k = kingdomCards(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        -:   37:
        1:   38:initializeGame (2, k, 8, &G);
        -:   39:
        1:   40:G.whoseTurn = currentPlayer;
        -:   41:
        -:   42://feast == 9;
        -:   43:
        1:   44:G.hand[currentPlayer][0] = baron;
        -:   45:
        1:   46:updateCoins(currentPlayer, &G, 0);
        -:   47:
        1:   48:int coinStorage = G.coins;
        -:   49:
        -:   50:
        1:   51:printf("\n");
        1:   52:printf("Testing gaining bonus coins....\n");
        -:   53://int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        1:   54:playCard(0, 0, 0, 0, &G);
        -:   55://cardEffect(9, 15, 0, 0, &G, 0, 0);
        -:   56:
        1:   57:int currentCoin = G.coins;
        -:   58:
        1:   59:assertCoins(coinStorage, currentCoin);
        -:   60:
        1:   61:printf("\n");
        1:   62:printf("\n");
        1:   63:printf("\n");
        -:   64:
        1:   65:return 0;
        -:   66:};
