        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 364 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      364:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
      364:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      130:   12:        return -1;
      234:   13:    return 0;
      364:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 1 returned 100% blocks executed 100%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
        1:   23:    int* k = malloc(10 * sizeof(int));
        1:   24:    k[0] = k1;
        1:   25:    k[1] = k2;
        1:   26:    k[2] = k3;
        1:   27:    k[3] = k4;
        1:   28:    k[4] = k5;
        1:   29:    k[5] = k6;
        1:   30:    k[6] = k7;
        1:   31:    k[7] = k8;
        1:   32:    k[8] = k9;
        1:   33:    k[9] = k10;
        1:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 13 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:
        -:   42:    //set up random number generator
       13:   43:    SelectStream(1);
       13:   44:    PutSeed((long)randomSeed);
        -:   45:
        -:   46:    //check number of players
       26:   47:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   48:    {
    #####:   49:        return -1;
        -:   50:    }
        -:   51:
        -:   52:    //set number of players
       13:   53:    state->numPlayers = numPlayers;
        -:   54:
        -:   55:    //check selected kingdom cards are different
      286:   56:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   57:    {
     2860:   58:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   59:        {
     2470:   60:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   61:            {
    #####:   62:                return -1;
        -:   63:            }
     1300:   64:        }
      130:   65:    }
        -:   66:
        -:   67:
        -:   68:    //initialize supply
        -:   69:    ///////////////////////////////
        -:   70:
        -:   71:    //set number of Curse cards
       13:   72:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   73:    {
       13:   74:        state->supplyCount[curse] = 10;
       13:   75:    }
    #####:   76:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   77:    {
    #####:   78:        state->supplyCount[curse] = 20;
    #####:   79:    }
        -:   80:    else
        -:   81:    {
    #####:   82:        state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:    //set number of Victory cards
       13:   86:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   87:    {
       13:   88:        state->supplyCount[estate] = 8;
       13:   89:        state->supplyCount[duchy] = 8;
       13:   90:        state->supplyCount[province] = 8;
       13:   91:    }
        -:   92:    else
        -:   93:    {
    #####:   94:        state->supplyCount[estate] = 12;
    #####:   95:        state->supplyCount[duchy] = 12;
    #####:   96:        state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:    //set number of Treasure cards
       13:  100:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  101:    state->supplyCount[silver] = 40;
       13:  102:    state->supplyCount[gold] = 30;
        -:  103:
        -:  104:    //set number of Kingdom cards
      546:  105:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  106:    {
     4564:  107:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7%
        -:  108:        {
     2132:  109:            if (kingdomCards[j] == i)
branch  0 taken 5%
branch  1 taken 95%
        -:  110:            {
        -:  111:                //check if card is a 'Victory' Kingdom card
      216:  112:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 12%
branch  3 taken 88%
        -:  113:                {
       17:  114:                    if (numPlayers == 2) {
branch  0 taken 100%
branch  1 taken 0%
       17:  115:                        state->supplyCount[i] = 8;
       17:  116:                    }
        -:  117:                    else {
    #####:  118:                        state->supplyCount[i] = 12;
        -:  119:                    }
       17:  120:                }
        -:  121:                else
        -:  122:                {
       93:  123:                    state->supplyCount[i] = 10;
        -:  124:                }
      110:  125:                break;
        -:  126:            }
        -:  127:            else    //card is not in the set choosen for the game
        -:  128:            {
     2022:  129:                state->supplyCount[i] = -1;
        -:  130:            }
     2022:  131:        }
        -:  132:
      260:  133:    }
        -:  134:
        -:  135:    ////////////////////////
        -:  136:    //supply intilization complete
        -:  137:
        -:  138:	//set player decks
       78:  139:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  140:	{
       26:  141:		state->deckCount[i] = 0;
      208:  142:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  143:		{
       78:  144:			gainCard(estate, state, 1, i);
       78:  145:		}
      416:  146:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:		{
      182:  148:			gainCard(copper, state, 1, i); // supplyPos, gameState, to Deck, player is 'i'
      182:  149:		}
       26:  150:	}
        -:  151:
        -:  152:    //shuffle player decks
       78:  153:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  154:    {
       26:  155:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  156:        {
    #####:  157:            return -1;
        -:  158:        }
       26:  159:    }
        -:  160:
        -:  161:	//draw player hands
       78:  162:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  163:	{
        -:  164:		//initialize hand size to zero
       26:  165:		state->handCount[i] = 0;
       26:  166:		state->discardCount[i] = 0;
        -:  167:		//draw 5 cards
      312:  168:		for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17%
        -:  169:		{
      130:  170:			drawCard(i, state);
      130:  171:		}
       26:  172:	}
        -:  173:
        -:  174:    //set embargo tokens to 0 for all supply piles
      728:  175:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  176:    {
      351:  177:        state->embargoTokens[i] = 0;
      351:  178:    }
        -:  179:
        -:  180:    //initialize first player's turn
       13:  181:    state->outpostPlayed = 0;
       13:  182:    state->phase = 0;
       13:  183:    state->numActions = 1;
       13:  184:    state->numBuys = 1;
       13:  185:    state->playedCardCount = 0;
       13:  186:    state->whoseTurn = 0;
        -:  187:
        -:  188:	//initialize trash mat
       13:  189:	state->trashCount = 0;
       13:  190:	state->trashPile[state->trashCount] = -1;
        -:  191:
       13:  192:    updateCoins(state->whoseTurn, state, 0);
        -:  193:
       13:  194:    return 0;
       13:  195:}
        -:  196:
function shuffle called 28 returned 100% blocks executed 100%
        -:  197:int shuffle(int player, struct gameState *state) {
        -:  198:
        -:  199:    int newDeck[MAX_DECK];
       28:  200:    int newDeckPos = 0;
        -:  201:    int card;
        -:  202:    int i;
        -:  203:
       28:  204:    if (state->deckCount[player] < 1)
branch  0 taken 7%
branch  1 taken 93%
        2:  205:        return -1;
       26:  206:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  207:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  208:
      572:  209:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      260:  210:        card = floor(Random() * state->deckCount[player]);
      260:  211:        newDeck[newDeckPos] = state->deck[player][card];
      260:  212:        newDeckPos++;
     1660:  213:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31%
      570:  214:            state->deck[player][i] = state->deck[player][i+1];
      570:  215:        }
      260:  216:        state->deckCount[player]--;
        -:  217:    }
      572:  218:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      260:  219:        state->deck[player][i] = newDeck[i];
      260:  220:        state->deckCount[player]++;
      260:  221:    }
       26:  222:    return 0;
       28:  223:}
        -:  224:
function playCard called 0 returned 0% blocks executed 0%
        -:  225:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  226:{
        -:  227:    int card;
    #####:  228:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  229:
        -:  230:    //check if it is the right phase
    #####:  231:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  232:    {
    #####:  233:        return -1;
        -:  234:    }
        -:  235:
        -:  236:    //check if player has enough actions
    #####:  237:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //get card played
    #####:  243:    card = handCard(handPos, state);
        -:  244:
        -:  245:    //check if selected card is an action
    #####:  246:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  247:    {
    #####:  248:        return -1;
        -:  249:    }
        -:  250:
        -:  251:    //play card
    #####:  252:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //reduce number of actions
    #####:  258:    state->numActions--;
        -:  259:
        -:  260:    //update coins (Treasure cards may be added with card draws)
    #####:  261:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  262:
    #####:  263:    return 0;
    #####:  264:}
        -:  265:
function buyCard called 0 returned 0% blocks executed 0%
        -:  266:int buyCard(int supplyPos, struct gameState *state) {
        -:  267:    int who;
        -:  268:    if (DEBUG) {
        -:  269:        printf("Entering buyCard...\n");
        -:  270:    }
        -:  271:
        -:  272:    // I don't know what to do about the phase thing.
        -:  273:
    #####:  274:    who = state->whoseTurn;
        -:  275:
    #####:  276:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  277:        if (DEBUG)
        -:  278:            printf("You do not have any buys left\n");
    #####:  279:        return -1;
    #####:  280:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  281:        if (DEBUG)
        -:  282:            printf("There are not any of that type of card left\n");
    #####:  283:        return -1;
    #####:  284:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  287:        return -1;
        -:  288:    } else {
    #####:  289:        state->phase=1;
        -:  290:        //state->supplyCount[supplyPos]--;
    #####:  291:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  292:
    #####:  293:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  294:        state->numBuys--;
        -:  295:        if (DEBUG)
        -:  296:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  297:    }
        -:  298:
        -:  299:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  300:    //state->discardCount[who]++;
        -:  301:
    #####:  302:    return 0;
    #####:  303:}
        -:  304:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  305:int numHandCards(struct gameState *state) {
    #####:  306:    return state->handCount[ whoseTurn(state) ];
        -:  307:}
        -:  308:
function handCard called 0 returned 0% blocks executed 0%
        -:  309:int handCard(int handPos, struct gameState *state) {
    #####:  310:    int currentPlayer = whoseTurn(state);
    #####:  311:    return state->hand[currentPlayer][handPos];
        -:  312:}
        -:  313:
function supplyCount called 262 returned 100% blocks executed 100%
        -:  314:int supplyCount(int card, struct gameState *state) {
      262:  315:    return state->supplyCount[card];
        -:  316:}
        -:  317:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  318:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  319:    int i;
    #####:  320:    int count = 0;
        -:  321:
    #####:  322:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  323:    {
    #####:  324:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  325:    }
        -:  326:
    #####:  327:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  330:    }
        -:  331:
    #####:  332:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  335:    }
        -:  336:
    #####:  337:    return count;
        -:  338:}
        -:  339:
function whoseTurn called 11 returned 100% blocks executed 100%
        -:  340:int whoseTurn(struct gameState *state) {
       11:  341:    return state->whoseTurn;
        -:  342:}
        -:  343:
function endTurn called 0 returned 0% blocks executed 0%
        -:  344:int endTurn(struct gameState *state) {
        -:  345:    int k;
        -:  346:    int i;
    #####:  347:    int currentPlayer = whoseTurn(state);
        -:  348:
        -:  349:    //Discard hand
    #####:  350:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  351:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  352:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  353:    }
    #####:  354:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  355:
        -:  356:    //Code for determining the player
    #####:  357:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  358:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  359:    }
        -:  360:    else {
    #####:  361:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  362:    }
        -:  363:
    #####:  364:    state->outpostPlayed = 0;
    #####:  365:    state->phase = 0;
    #####:  366:    state->numActions = 1;
    #####:  367:    state->coins = 0;
    #####:  368:    state->numBuys = 1;
    #####:  369:    state->playedCardCount = 0;
    #####:  370:    state->handCount[state->whoseTurn] = 0;
        -:  371:
        -:  372:    //int k; move to top
        -:  373:    //Next player draws hand
    #####:  374:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  375:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  376:    }
        -:  377:
        -:  378:    //Update money
    #####:  379:    updateCoins(state->whoseTurn, state, 0);
        -:  380:
    #####:  381:    return 0;
        -:  382:}
        -:  383:
function isGameOver called 1 returned 100% blocks executed 84%
        -:  384:int isGameOver(struct gameState *state) {
        -:  385:    int i;
        -:  386:    int j;
        -:  387:
        -:  388:    //if stack of Province cards is empty, the game ends
        1:  389:    if (state->supplyCount[province] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  390:    {
    #####:  391:        return 1;
        -:  392:    }
        -:  393:
        -:  394:    //if three supply pile are at 0, the game ends
        1:  395:    j = 0;
       52:  396:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  397:    {
       25:  398:        if (state->supplyCount[i] == 0)
branch  0 taken 4%
branch  1 taken 96%
        -:  399:        {
        1:  400:            j++;
        1:  401:        }
       25:  402:    }
        1:  403:    if ( j >= 3)
branch  0 taken 0%
branch  1 taken 100%
        -:  404:    {
    #####:  405:        return 1;
        -:  406:    }
        -:  407:
        1:  408:    return 0;
        1:  409:}
        -:  410:
function scoreFor called 1 returned 100% blocks executed 52%
        -:  411:int scoreFor (int player, struct gameState *state) {
        -:  412:
        -:  413:    int i;
        1:  414:    int score = 0;
        -:  415:    //score from hand
       12:  416:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  417:    {
        5:  418:        if (state->hand[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  419:            score = score - 1;
    #####:  420:        };
        5:  421:        if (state->hand[player][i] == estate) {
branch  0 taken 20%
branch  1 taken 80%
        1:  422:            score = score + 1;
        1:  423:        };
        5:  424:        if (state->hand[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  425:            score = score + 3;
    #####:  426:        };
        5:  427:        if (state->hand[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  428:            score = score + 6;
    #####:  429:        };
        5:  430:        if (state->hand[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  431:            score = score + 1;
    #####:  432:        };
        5:  433:        if (state->hand[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  434:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  435:        };
        5:  436:    }
        -:  437:
        -:  438:    //score from discard
        2:  439:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100%
        -:  440:    {
    #####:  441:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score - 1;
    #####:  443:        };
    #####:  444:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  445:            score = score + 1;
    #####:  446:        };
    #####:  447:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  448:            score = score + 3;
    #####:  449:        };
    #####:  450:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  451:            score = score + 6;
    #####:  452:        };
    #####:  453:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  454:            score = score + 1;
    #####:  455:        };
    #####:  456:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  457:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  458:        };
    #####:  459:    }
        -:  460:
        -:  461:    //score from deck
       12:  462:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  463:    {
        5:  464:        if (state->deck[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  465:            score = score - 1;
    #####:  466:        };
        5:  467:        if (state->deck[player][i] == estate) {
branch  0 taken 40%
branch  1 taken 60%
        2:  468:            score = score + 1;
        2:  469:        };
        5:  470:        if (state->deck[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  471:            score = score + 3;
    #####:  472:        };
        5:  473:        if (state->deck[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  474:            score = score + 6;
    #####:  475:        };
        5:  476:        if (state->deck[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  477:            score = score + 1;
    #####:  478:        };
        5:  479:        if (state->deck[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  480:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  481:        };
        5:  482:    }
        -:  483:
        1:  484:    return score;
        -:  485:}
        -:  486:
function getWinners called 0 returned 0% blocks executed 0%
        -:  487:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  488:    int i;
        -:  489:    int j;
        -:  490:    int highScore;
        -:  491:    int currentPlayer;
        -:  492:
        -:  493:    //get score for each player
    #####:  494:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:    {
        -:  496:        //set unused player scores to -9999
    #####:  497:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  498:        {
    #####:  499:            players[i] = -9999;
    #####:  500:        }
        -:  501:        else
        -:  502:        {
    #####:  503:            players[i] = scoreFor (i, state);
        -:  504:        }
    #####:  505:    }
        -:  506:
        -:  507:    //find highest score
    #####:  508:    j = 0;
    #####:  509:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  512:        {
    #####:  513:            j = i;
    #####:  514:        }
    #####:  515:    }
    #####:  516:    highScore = players[j];
        -:  517:
        -:  518:    //add 1 to players who had less turns
    #####:  519:    currentPlayer = whoseTurn(state);
    #####:  520:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  523:        {
    #####:  524:            players[i]++;
    #####:  525:        }
    #####:  526:    }
        -:  527:
        -:  528:    //find new highest score
    #####:  529:    j = 0;
    #####:  530:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  531:    {
    #####:  532:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  533:        {
    #####:  534:            j = i;
    #####:  535:        }
    #####:  536:    }
    #####:  537:    highScore = players[j];
        -:  538:
        -:  539:    //set winners in array to 1 and rest to 0
    #####:  540:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  541:    {
    #####:  542:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  543:        {
    #####:  544:            players[i] = 1;
    #####:  545:        }
        -:  546:        else
        -:  547:        {
    #####:  548:            players[i] = 0;
        -:  549:        }
    #####:  550:    }
        -:  551:
    #####:  552:    return 0;
        -:  553:}
        -:  554:
function drawCard called 132 returned 100% blocks executed 75%
        -:  555:int drawCard(int player, struct gameState *state)
        -:  556:{
        -:  557:    int count;
        -:  558:    int deckCounter;
      132:  559:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 2%
branch  1 taken 98%
        -:  560:
        -:  561:        //Step 1 Shuffle the discard pile back into a deck
        -:  562:        int i;
        -:  563:        //Move discard to deck
        4:  564:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  565:            state->deck[player][i] = state->discard[player][i];
    #####:  566:            state->discard[player][i] = -1;
    #####:  567:        }
        -:  568:
        2:  569:        state->deckCount[player] = state->discardCount[player];
        2:  570:        state->discardCount[player] = 0;//Reset discard
        -:  571:
        -:  572:        //Shufffle the deck
        2:  573:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  574:
        -:  575:        if (DEBUG) { //Debug statements
        -:  576:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  577:        }
        -:  578:
        2:  579:        state->discardCount[player] = 0;
        -:  580:
        -:  581:        //Step 2 Draw Card
        2:  582:        count = state->handCount[player];//Get current player's hand count
        -:  583:
        -:  584:        if (DEBUG) { //Debug statements
        -:  585:            printf("Current hand count: %d\n", count);
        -:  586:        }
        -:  587:
        2:  588:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  589:
        2:  590:        if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        2:  591:            return -1;
        -:  592:
    #####:  593:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  594:        state->deckCount[player]--;
    #####:  595:        state->handCount[player]++;//Increment hand count
    #####:  596:    }
        -:  597:
        -:  598:    else {
      130:  599:        count = state->handCount[player];//Get current hand count for player
        -:  600:        if (DEBUG) { //Debug statements
        -:  601:            printf("Current hand count: %d\n", count);
        -:  602:        }
        -:  603:
      130:  604:        deckCounter = state->deckCount[player];//Create holder for the deck count
      130:  605:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      130:  606:        state->deckCount[player]--;
      130:  607:        state->handCount[player]++;//Increment hand count
        -:  608:    }
        -:  609:
      130:  610:    return 0;
      132:  611:}
        -:  612:
function getCost called 8 returned 100% blocks executed 22%
        -:  613:int getCost(int cardNumber)
        -:  614:{
        8:  615:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 13%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 13%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  616:    {
        -:  617:    case curse:
    #####:  618:        return 0;
        -:  619:    case estate:
        1:  620:        return 2;
        -:  621:    case duchy:
    #####:  622:        return 5;
        -:  623:    case province:
    #####:  624:        return 8;
        -:  625:    case copper:
        4:  626:        return 0;
        -:  627:    case silver:
        1:  628:        return 3;
        -:  629:    case gold:
        2:  630:        return 6;
        -:  631:    case adventurer:
    #####:  632:        return 6;
        -:  633:    case council_room:
    #####:  634:        return 5;
        -:  635:    case feast:
    #####:  636:        return 4;
        -:  637:    case gardens:
    #####:  638:        return 4;
        -:  639:    case mine:
    #####:  640:        return 5;
        -:  641:    case remodel:
    #####:  642:        return 4;
        -:  643:    case smithy:
    #####:  644:        return 4;
        -:  645:    case village:
    #####:  646:        return 3;
        -:  647:    case baron:
    #####:  648:        return 4;
        -:  649:    case great_hall:
    #####:  650:        return 3;
        -:  651:    case minion:
    #####:  652:        return 5;
        -:  653:    case steward:
    #####:  654:        return 3;
        -:  655:    case tribute:
    #####:  656:        return 5;
        -:  657:    case ambassador:
    #####:  658:        return 3;
        -:  659:    case cutpurse:
    #####:  660:        return 4;
        -:  661:    case embargo:
    #####:  662:        return 2;
        -:  663:    case outpost:
    #####:  664:        return 5;
        -:  665:    case salvager:
    #####:  666:        return 4;
        -:  667:    case sea_hag:
    #####:  668:        return 4;
        -:  669:    case treasure_map:
    #####:  670:        return 4;
        -:  671:    }
        -:  672:
    #####:  673:    return -1;
        8:  674:}
        -:  675:
function cardEffect called 11 returned 100% blocks executed 27%
        -:  676:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  677:{
        -:  678:    int i;
        -:  679:    int j;
        -:  680:    int k;
        -:  681:    int x;
        -:  682:    int index;
       11:  683:    int currentPlayer = whoseTurn(state);
       11:  684:    int nextPlayer = currentPlayer + 1;
        -:  685:
       11:  686:    int tributeRevealedCards[2] = {-1, -1};
        -:  687:    int temphand[MAX_HAND];// moved above the if statement
       11:  688:    int drawntreasure=0;
        -:  689:    int cardDrawn;
       11:  690:    int z = 0;// this is the counter for the temp hand
       11:  691:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  692:        nextPlayer = 0;
    #####:  693:    }
        -:  694:
        -:  695:
        -:  696:    //uses switch to select card and perform actions
       11:  697:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 18%
branch  5 taken 18%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 55%
branch 13 taken 9%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  698:    {
        -:  699:    case adventurer:
    #####:  700:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  701:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  702:                shuffle(currentPlayer, state);
    #####:  703:            }
    #####:  704:            drawCard(currentPlayer, state);
    #####:  705:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  706:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  707:                drawntreasure++;
        -:  708:            else {
    #####:  709:                temphand[z]=cardDrawn;
    #####:  710:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  711:                z++;
        -:  712:            }
        -:  713:        }
    #####:  714:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  715:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  716:            z=z-1;
        -:  717:        }
    #####:  718:        return 0;
        -:  719:
        -:  720:    case council_room:
        -:  721:        //+4 Cards
    #####:  722:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  723:        {
    #####:  724:            drawCard(currentPlayer, state);
    #####:  725:        }
        -:  726:
        -:  727:        //+1 Buy
    #####:  728:        state->numBuys++;
        -:  729:
        -:  730:        //Each other player draws a card
    #####:  731:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  732:        {
    #####:  733:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  734:            {
    #####:  735:                drawCard(i, state);
    #####:  736:            }
    #####:  737:        }
        -:  738:
        -:  739:        //put played card in played card pile
    #####:  740:        discardCard(handPos, currentPlayer, state, 0);
        -:  741:
    #####:  742:        return 0;
        -:  743:
        -:  744:    case feast:
        -:  745:        //gain card with cost up to 5
        -:  746:        //Backup hand
    #####:  747:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  748:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  749:            state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  750:        }
        -:  751:        //Backup hand
        -:  752:
        -:  753:        //Update Coins for Buy
    #####:  754:        updateCoins(currentPlayer, state, 5);
    #####:  755:        x = 1;//Condition to loop on
    #####:  756:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  757:            if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -:  758:                if (DEBUG)
        -:  759:                    printf("None of that card left, sorry!\n");
        -:  760:
        -:  761:                if (DEBUG) {
        -:  762:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  763:                }
    #####:  764:            }
    #####:  765:            else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####:  766:                printf("That card is too expensive!\n");
        -:  767:
        -:  768:                if (DEBUG) {
        -:  769:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  770:                }
    #####:  771:            }
        -:  772:            else {
        -:  773:
        -:  774:                if (DEBUG) {
        -:  775:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  776:                }
        -:  777:
    #####:  778:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  779:                x = 0;//No more buying cards
        -:  780:
        -:  781:                if (DEBUG) {
        -:  782:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  783:                }
        -:  784:
        -:  785:            }
        -:  786:        }
        -:  787:
        -:  788:        //Reset Hand
    #####:  789:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  790:            state->hand[currentPlayer][i] = temphand[i];
    #####:  791:            temphand[i] = -1;
    #####:  792:        }
        -:  793:        //Reset Hand
        -:  794:
    #####:  795:        return 0;
        -:  796:
        -:  797:    case gardens:
    #####:  798:        return -1;
        -:  799:
        -:  800:    case mine:
        2:  801:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  802:
        4:  803:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  804:        {
    #####:  805:            return -1;
        -:  806:        }
        -:  807:
        4:  808:        if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  809:        {
    #####:  810:            return -1;
        -:  811:        }
        -:  812:
        2:  813:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 taken 50%
branch  1 taken 50%
        -:  814:        {
        1:  815:            return -1;
        -:  816:        }
        -:  817:
        1:  818:        gainCard(choice2, state, 2, currentPlayer);
        -:  819:
        -:  820:        //discard card from hand
        1:  821:        discardCard(handPos, currentPlayer, state, 0);
        -:  822:
        -:  823:        //find card to trash in hand equal to j
        4:  824:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  825:        {
        2:  826:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 50%
branch  1 taken 50%
        -:  827:            {
        1:  828:                discardCard(i, currentPlayer, state, 1);
        1:  829:                break;
        -:  830:            }
        1:  831:        }
        -:  832:
        1:  833:        return 0;
        -:  834:
        -:  835:    case remodel:
        2:  836:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  837:
        2:  838:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 taken 50%
branch  1 taken 50%
        -:  839:        {
        1:  840:            return -1;
        -:  841:        }
        -:  842:
        -:  843:        //gainCard(choice2, state, 0, currentPlayer);
        -:  844:
        -:  845:        //discard card from hand
        1:  846:        discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:        //discard trashed card
        2:  849:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  850:        {
        1:  851:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 100%
branch  1 taken 0%
        -:  852:            {
        1:  853:                discardCard(i, currentPlayer, state, 1);
        1:  854:                break;
        -:  855:            }
    #####:  856:        }
        -:  857:
        1:  858:	gainCard(choice2, state, 0, currentPlayer);
        -:  859:
        1:  860:        return 0;
        -:  861:
        -:  862:    case smithy:
        -:  863:        //+3 Cards
    #####:  864:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  865:        {
    #####:  866:            drawCard(currentPlayer, state);
    #####:  867:        }
        -:  868:
        -:  869:        //discard card from hand
    #####:  870:        discardCard(handPos, currentPlayer, state, 0);
    #####:  871:        return 0;
        -:  872:
        -:  873:    case village:
        -:  874:        //+1 Card
    #####:  875:        drawCard(currentPlayer, state);
        -:  876:
        -:  877:        //+2 Actions
    #####:  878:        state->numActions = state->numActions + 2;
        -:  879:
        -:  880:        //discard played card from hand
    #####:  881:        discardCard(handPos, currentPlayer, state, 0);
    #####:  882:        return 0;
        -:  883:
        -:  884:    case baron:
    #####:  885:        state->numBuys++;//Increase buys by 1!
    #####:  886:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:            int p = 0;//Iterator for hand!
    #####:  888:            int card_not_discarded = 1;//Flag for discard set!
    #####:  889:            while(card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  890:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:                    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:                    state->discardCount[currentPlayer]++;
    #####:  894:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  895:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  896:                    }
    #####:  897:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:                    state->handCount[currentPlayer]--;
    #####:  899:                    card_not_discarded = 0;//Exit the loop
    #####:  900:                }
    #####:  901:                else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  902:                    if(DEBUG) {
        -:  903:                        printf("No estate cards in your hand, invalid choice\n");
        -:  904:                        printf("Must gain an estate if there are any\n");
        -:  905:                    }
    #####:  906:                    if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  907:                        gainCard(estate, state, 0, currentPlayer);
        -:  908:
    #####:  909:                        state->supplyCount[estate]--;//Decrement estates
    #####:  910:                        if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  911:                            isGameOver(state);
    #####:  912:                        }
    #####:  913:                    }
    #####:  914:                    card_not_discarded = 0;//Exit the loop
    #####:  915:                }
        -:  916:
        -:  917:                else {
    #####:  918:                    p++;//Next card
        -:  919:                }
        -:  920:            }
    #####:  921:        }
        -:  922:
        -:  923:        else {
    #####:  924:            if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  925:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  926:
    #####:  927:                state->supplyCount[estate]--;//Decrement Estates
    #####:  928:                if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  929:                    isGameOver(state);
    #####:  930:                }
    #####:  931:            }
        -:  932:        }
        -:  933:
        -:  934:
    #####:  935:        return 0;
        -:  936:
        -:  937:    case great_hall:
        -:  938:        //+1 Card
    #####:  939:        drawCard(currentPlayer, state);
        -:  940:
        -:  941:        //+1 Actions
    #####:  942:        state->numActions++;
        -:  943:
        -:  944:        //discard card from hand
    #####:  945:        discardCard(handPos, currentPlayer, state, 0);
    #####:  946:        return 0;
        -:  947:
        -:  948:    case minion:
        -:  949:        //+1 action
    #####:  950:        state->numActions++;
        -:  951:
        -:  952:        //discard card from hand
    #####:  953:        discardCard(handPos, currentPlayer, state, 0);
        -:  954:
    #####:  955:		if (choice1)
branch  0 never executed
branch  1 never executed
        -:  956:        {
    #####:  957:            state->coins = state->coins + 2;
    #####:  958:        }
    #####:  959:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  960:        {
        -:  961:            //discard hand
    #####:  962:            while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  963:            {
    #####:  964:                discardCard(handPos, currentPlayer, state, 0);
        -:  965:            }
        -:  966:
        -:  967:            //draw 4
    #####:  968:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  969:            {
    #####:  970:                drawCard(currentPlayer, state);
    #####:  971:            }
        -:  972:
        -:  973:            //other players discard hand and redraw if hand size > 4
    #####:  974:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  975:            {
    #####:  976:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  977:                {
    #####:  978:                    if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  979:                    {
        -:  980:                        //discard hand
    #####:  981:                        while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  982:                        {
    #####:  983:                            discardCard(handPos, i, state, 0);
        -:  984:                        }
        -:  985:
        -:  986:                        //draw 4
    #####:  987:                        for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  988:                        {
    #####:  989:                            drawCard(i, state);
    #####:  990:                        }
    #####:  991:                    }
    #####:  992:                }
    #####:  993:            }
        -:  994:
    #####:  995:        }
    #####:  996:        return 0;
        -:  997:
        -:  998:    case steward:
    #####:  999:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1000:        {
        -: 1001:            //+2 cards
    #####: 1002:            drawCard(currentPlayer, state);
    #####: 1003:            drawCard(currentPlayer, state);
    #####: 1004:        }
    #####: 1005:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1006:        {
        -: 1007:            //+2 coins
    #####: 1008:            state->coins = state->coins + 2;
    #####: 1009:        }
        -: 1010:        else
        -: 1011:        {
        -: 1012:            //trash 2 cards in hand
    #####: 1013:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1014:            discardCard(choice3, currentPlayer, state, 1);
        -: 1015:        }
        -: 1016:
        -: 1017:        //discard card from hand
    #####: 1018:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1019:        return 0;
        -: 1020:
        -: 1021:    case tribute:
        6: 1022:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1023:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1024:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1025:		// then put in discard
    #####: 1026:                state->deckCount[nextPlayer]--;
    #####: 1027:            }
    #####: 1028:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1029:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1030:		// then put in discard
    #####: 1031:                state->discardCount[nextPlayer]--;
    #####: 1032:            }
        -: 1033:            else {
        -: 1034:                //No Card to Reveal
        -: 1035:                if (DEBUG) {
        -: 1036:                    printf("No cards to reveal\n");
        -: 1037:                }
        -: 1038:            }
    #####: 1039:        }
        -: 1040:
        -: 1041:        else {
        6: 1042:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1043:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1044:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:                    state->deckCount[nextPlayer]++;
    #####: 1046:                    state->discard[nextPlayer][i] = -1;
    #####: 1047:                    state->discardCount[nextPlayer]--;
    #####: 1048:                }
        -: 1049:
    #####: 1050:                shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1051:            }
        -: 1052:	    // put last card from next player's deck into tributeRevealedCards[0]
        6: 1053:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1054:	    // THEN put last card from next player's deck into their discard
        6: 1055:	    state->discard[nextPlayer][state->discardCount[nextPlayer]] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1056:		//printf("==> state->discard[nextPlayer][state->discardCount[nextPlayer]: %d\n", state->discard[nextPlayer][state->discardCount[nextPlayer]]);
        -: 1057:		//printf("==> state->deck[nextPlayer][state->deckCount[nextPlayer]-1]]; %d\n", state->deck[nextPlayer][state->deckCount[nextPlayer]-1]);
        -: 1058:	    // set the old deck card value to invalid
        6: 1059:	    state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;
        -: 1060:            // decrement counts for discard and deck
        6: 1061:	    state->discardCount[nextPlayer]++;
        6: 1062:	    state->deckCount[nextPlayer]--;
        -: 1063:
        -: 1064:	    // put last card from next player's deck into tributeRevealedCards[0]
        6: 1065:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1066:	    // THEN put last card from next player's deck into their discard
        6: 1067:	    state->discard[nextPlayer][state->discardCount[nextPlayer]] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1068:	    // set the old deck card value to invalid
        6: 1069:	    state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;
        -: 1070:            // decrement counts for discard and deck
        6: 1071:	    state->discardCount[nextPlayer]++;
        6: 1072:	    state->deckCount[nextPlayer]--;
        -: 1073:
        -: 1074:		//printf("SUPER TRACE: tributeRevealedCards[0]: %d\n", tributeRevealedCards[0]);
        -: 1075:		//printf("SUPER TRACE: tributeRevealedCards[1]: %d\n", tributeRevealedCards[1]);
        -: 1076:        }
        -: 1077:
        6: 1078:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 100%
branch  1 taken 0%
        6: 1079:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        6: 1080:            state->playedCardCount++;
        6: 1081:            tributeRevealedCards[1] = -1;
        6: 1082:        }
        -: 1083:
       36: 1084:        for (i = 0; i < 2; i ++) {
branch  0 taken 67%
branch  1 taken 33%
       36: 1085:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 8%
branch  5 taken 92%
        1: 1086:                state->coins += 2;
        1: 1087:            }
        -: 1088:
       21: 1089:            else if (tributeRevealedCards[i] == estate ||
branch  0 taken 91%
branch  1 taken 9%
branch  2 taken 0%
branch  3 taken 100%
       10: 1090:		     tributeRevealedCards[i] == duchy ||
branch  0 taken 100%
branch  1 taken 0%
       10: 1091:                     tributeRevealedCards[i] == province ||
branch  0 taken 100%
branch  1 taken 0%
       10: 1092:                     tributeRevealedCards[i] == gardens ||
branch  0 taken 100%
branch  1 taken 0%
       10: 1093:                     tributeRevealedCards[i] == great_hall) { //Victory Card Found
        -: 1094:
        1: 1095:                	drawCard(currentPlayer, state);
        1: 1096:                	drawCard(currentPlayer, state);
        1: 1097:            }
       18: 1098:            else if (tributeRevealedCards[i] == adventurer ||
branch  0 taken 80%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 100%
        8: 1099:		     tributeRevealedCards[i] == council_room ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1100:		     tributeRevealedCards[i] == mine ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1101:		     tributeRevealedCards[i] == remodel ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1102:		     tributeRevealedCards[i] == smithy||
branch  0 taken 100%
branch  1 taken 0%
        8: 1103:		     tributeRevealedCards[i] == village ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1104:		     tributeRevealedCards[i] == baron ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1105:		     tributeRevealedCards[i] == great_hall ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1106:		     tributeRevealedCards[i] == steward ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1107:		     tributeRevealedCards[i] == tribute ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1108:		     tributeRevealedCards[i] == ambassador ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1109:		     tributeRevealedCards[i] == cutpurse ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1110:		     tributeRevealedCards[i] == outpost ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1111:		     tributeRevealedCards[i] == salvager ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1112:		     tributeRevealedCards[i] == sea_hag ||
branch  0 taken 100%
branch  1 taken 0%
        8: 1113:		     tributeRevealedCards[i] == treasure_map ){
        -: 1114:			//printf("BEFORE state->numActions = state->numActions + 2, numActions = %d\n", state->numActions);
        2: 1115:                	state->numActions = state->numActions + 2;
        -: 1116:			//printf("AFTER state->numActions = state->numActions + 2, numActions = %d\n", state->numActions);
        2: 1117:            }
       12: 1118:        }
        -: 1119:	/*
        -: 1120:	printf("TRACE: 'tribute'\n");
        -: 1121:	printf("     : at end of function..\n");
        -: 1122:	printf("     : tributeRevealedCards[0]: %d\n", tributeRevealedCards[0]);
        -: 1123:	printf("     : tributeRevealedCards[1]: %d\n", tributeRevealedCards[1]);
        -: 1124:	*/
        -: 1125:	//if (tributeRevealedCards[0] != -1)
        -: 1126:	//{
        -: 1127:		//state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[0];
        -: 1128:		//state->discardCount[nextPlayer]++;
        -: 1129:	//}
        -: 1130:	//if (tributeRevealedCards[1] != -1)
        -: 1131:	//{
        -: 1132:		//state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[1];
        -: 1133:		//state->discardCount[nextPlayer]++;
        -: 1134:	//}
        -: 1135:	/*
        -: 1136:	printf("   : discard[nextPlayer %d][-1 %d]: %d\n",
        -: 1137:			nextPlayer, state->discardCount[nextPlayer] -1, state->discard[nextPlayer][state->discardCount[nextPlayer] -1]);
        -: 1138:	printf("   : discard[nextPlayer %d][-2 %d]: %d\n",
        -: 1139:			nextPlayer, state->discardCount[nextPlayer] -2, state->discard[nextPlayer][state->discardCount[nextPlayer] -2]);
        -: 1140:	printf("   : state->numActions now %d\n", state->numActions);
        -: 1141:
        -: 1142:	printf("END TRACE 'tribute' ==========================================================================\n");
        -: 1143:	*/
        6: 1144:        return 0;
        -: 1145:
        -: 1146:    case ambassador:
        1: 1147:        j = 0;		//used to check if player has enough cards to discard
        -: 1148:
        2: 1149:        if (choice2 > 2 || choice2 < 0)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1150:        {
    #####: 1151:            return -1;
        -: 1152:        }
        -: 1153:
        1: 1154:        if (choice1 == handPos)
branch  0 taken 0%
branch  1 taken 100%
        -: 1155:        {
    #####: 1156:            return -1;
        -: 1157:        }
        -: 1158:
       10: 1159:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1160:        {
        7: 1161:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -: 1162:            {
    #####: 1163:                j++;
    #####: 1164:            }
        4: 1165:        }
        1: 1166:        if (j < choice2)
branch  0 taken 100%
branch  1 taken 0%
        -: 1167:        {
        1: 1168:            return -1;
        -: 1169:        }
        -: 1170:
        -: 1171:        if (DEBUG)
        -: 1172:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1173:
        -: 1174:        //increase supply count for choosen card by amount being discarded
    #####: 1175:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1176:
        -: 1177:        //each other player gains a copy of revealed card
    #####: 1178:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1179:        {
    #####: 1180:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1181:            {
    #####: 1182:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1183:            }
    #####: 1184:        }
        -: 1185:
        -: 1186:        //discard played card from hand
    #####: 1187:        discardCard(handPos, currentPlayer, state, 0);
        -: 1188:
        -: 1189:        //trash copies of cards returned to supply
    #####: 1190:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1191:        {
    #####: 1192:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:            {
    #####: 1194:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1195:                {
    #####: 1196:                    discardCard(i, currentPlayer, state, 1);
    #####: 1197:                    break;
        -: 1198:                }
    #####: 1199:            }
    #####: 1200:        }
        -: 1201:
    #####: 1202:        return 0;
        -: 1203:
        -: 1204:    case cutpurse:
        -: 1205:
    #####: 1206:        updateCoins(currentPlayer, state, 2);
    #####: 1207:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1208:        {
    #####: 1209:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1210:            {
    #####: 1211:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1212:                {
    #####: 1213:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1214:                    {
    #####: 1215:                        discardCard(j, i, state, 0);
    #####: 1216:                        break;
        -: 1217:                    }
    #####: 1218:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1219:                    {
    #####: 1220:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1221:                        {
        -: 1222:                            if (DEBUG)
        -: 1223:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1224:                        }
    #####: 1225:                        break;
        -: 1226:                    }
    #####: 1227:                }
        -: 1228:
    #####: 1229:            }
        -: 1230:
    #####: 1231:        }
        -: 1232:
        -: 1233:        //discard played card from hand
    #####: 1234:        discardCard(handPos, currentPlayer, state, 0);
        -: 1235:
    #####: 1236:        return 0;
        -: 1237:
        -: 1238:
        -: 1239:    case embargo:
        -: 1240:        //+2 Coins
    #####: 1241:        state->coins = state->coins + 2;
        -: 1242:
        -: 1243:        //see if selected pile is in play
    #####: 1244:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1245:        {
    #####: 1246:            return -1;
        -: 1247:        }
        -: 1248:
        -: 1249:        //add embargo token to selected supply pile
    #####: 1250:        state->embargoTokens[choice1]++;
        -: 1251:
        -: 1252:        //trash card
    #####: 1253:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1254:        return 0;
        -: 1255:
        -: 1256:    case outpost:
        -: 1257:        //set outpost flag
    #####: 1258:        state->outpostPlayed++;
        -: 1259:
        -: 1260:        //discard card
    #####: 1261:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1262:        return 0;
        -: 1263:
        -: 1264:    case salvager:
        -: 1265:        //+1 buy
    #####: 1266:        state->numBuys++;
        -: 1267:
    #####: 1268:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1269:        {
        -: 1270:            //gain coins equal to trashed card
    #####: 1271:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1272:            //trash card
    #####: 1273:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1274:        }
        -: 1275:
        -: 1276:        //discard card
    #####: 1277:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1278:        return 0;
        -: 1279:
        -: 1280:    case sea_hag:
    #####: 1281:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1282:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1283:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1284:                state->deckCount[i]--;
    #####: 1285:                state->discardCount[i]++;
    #####: 1286:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1287:            }
    #####: 1288:        }
    #####: 1289:        return 0;
        -: 1290:
        -: 1291:    case treasure_map:
        -: 1292:        //search hand for another treasure_map
    #####: 1293:        index = -1;
    #####: 1294:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1295:        {
    #####: 1296:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1297:            {
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:            }
    #####: 1301:        }
    #####: 1302:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1303:        {
        -: 1304:            //trash both treasure cards
    #####: 1305:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1306:            discardCard(index, currentPlayer, state, 1);
        -: 1307:
        -: 1308:            //gain 4 Gold cards
    #####: 1309:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1310:            {
    #####: 1311:                gainCard(gold, state, 1, currentPlayer);
    #####: 1312:            }
        -: 1313:
        -: 1314:            //return success
    #####: 1315:            return 1;
        -: 1316:        }
        -: 1317:
        -: 1318:        //no second treasure_map found in hand
    #####: 1319:        return -1;
        -: 1320:    }
        -: 1321:
    #####: 1322:    return -1;
       11: 1323:}
        -: 1324:
function discardCard called 4 returned 100% blocks executed 92%
        -: 1325:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1326:{
        4: 1327:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1328:    state->playedCardCount++;
        -: 1329:    //if card is not trashed, added to Played pile
        -: 1330:    //if (trashFlag < 1)
        4: 1331:    if (trashFlag == 0)
branch  0 taken 50%
branch  1 taken 50%
        -: 1332:    {
        -: 1333:        ////add card to played pile
        -: 1334:        //state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        -: 1335:        //state->playedCardCount++;
        -: 1336:
        -: 1337:		//add card to played pile
        2: 1338:		state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos];
        2: 1339:		state->discardCount[currentPlayer]++;
        2: 1340:    }
        2: 1341:    else if (trashFlag == 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1342:    {
        -: 1343:		//add card to trash pile
        2: 1344:		state->trashPile[state->trashCount] = state->hand[currentPlayer][handPos];
        2: 1345:		state->trashCount++;
        2: 1346:    }
        -: 1347:
        -: 1348:    //set played card to -1
        4: 1349:    state->hand[currentPlayer][handPos] = -1;
        -: 1350:
        -: 1351:    //remove card from player's hand
        4: 1352:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 50%
branch  1 taken 50%
        -: 1353:    {
        -: 1354:        //reduce number of cards in hand
        2: 1355:        state->handCount[currentPlayer]--;
        2: 1356:    }
        2: 1357:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1358:    {
        -: 1359:        //reduce number of cards in hand
    #####: 1360:        state->handCount[currentPlayer]--;
    #####: 1361:    }
        -: 1362:    else
        -: 1363:    {
        -: 1364:        //replace discarded card with last card in hand
        2: 1365:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1366:        //set last card to -1
        2: 1367:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1368:        //reduce number of cards in hand
        2: 1369:        state->handCount[currentPlayer]--;
        -: 1370:    }
        -: 1371:
        4: 1372:    return 0;
        -: 1373:}
        -: 1374:
function gainCard called 262 returned 100% blocks executed 90%
        -: 1375:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1376:{
        -: 1377:    //Note: supplyPos is enum of choosen card
        -: 1378:
        -: 1379:    //check if supply pile is empty (0) or card is not used in game (-1)
      262: 1380:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:    {
    #####: 1382:        return -1;
        -: 1383:    }
        -: 1384:
        -: 1385:    //added card for [whoseTurn] current player:
        -: 1386:    // toFlag = 0 : add to discard
        -: 1387:    // toFlag = 1 : add to deck
        -: 1388:    // toFlag = 2 : add to hand
        -: 1389:
      262: 1390:    if (toFlag == 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1391:    {
      260: 1392:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      260: 1393:        state->deckCount[player]++;
      260: 1394:    }
        2: 1395:    else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1396:    {
        1: 1397:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1398:        state->handCount[player]++;
        1: 1399:    }
        -: 1400:    else
        -: 1401:    {
        1: 1402:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1403:        state->discardCount[player]++;
        -: 1404:    }
        -: 1405:
        -: 1406:    //decrease number in supply pile
      262: 1407:    state->supplyCount[supplyPos]--;
        -: 1408:
      262: 1409:    return 0;
      262: 1410:}
        -: 1411:
function updateCoins called 21 returned 100% blocks executed 85%
        -: 1412:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1413:{
        -: 1414:    int i;
        -: 1415:
        -: 1416:    //reset coin count
       21: 1417:    state->coins = 0;
        -: 1418:
        -: 1419:    //add coins for each Treasure card in player's hand
      192: 1420:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22%
        -: 1421:    {
       75: 1422:        if (state->hand[player][i] == copper)
branch  0 taken 72%
branch  1 taken 28%
        -: 1423:        {
       54: 1424:            state->coins += 1;
       54: 1425:        }
       21: 1426:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1427:        {
    #####: 1428:            state->coins += 2;
    #####: 1429:        }
       21: 1430:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1431:        {
    #####: 1432:            state->coins += 3;
    #####: 1433:        }
       75: 1434:    }
        -: 1435:
        -: 1436:    //add bonus
       21: 1437:    state->coins += bonus;
        -: 1438:
       21: 1439:    return 0;
        -: 1440:}
        -: 1441:
        -: 1442:
        -: 1443://end of dominion.c
