        -:    0:Source:bug8unittest.c
        -:    0:Graph:bug8unittest.gcno
        -:    0:Data:bug8unittest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:/*
        -:   11:void assertCoins (int coinStorage, int currentCoin) {
        -:   12:
        -:   13:    // Assertion
        -:   14:    if (currentCoin == coinStorage) {
        -:   15:        printf("Coins are correctly calculated for current player! No errors.\n\n");
        -:   16:    }
        -:   17:
        -:   18:    else {
        -:   19:        printf("Coins are incorrectly calculated for current player! Error detected -- player has wrong number of coins.\n\n");
        -:   20:    }
        -:   21:}
        -:   22:
        -:   23:
        -:   24:*/
        -:   25:
function main called 1 returned 100% blocks executed 100%
        -:   26:int main () {
        -:   27:
        1:   28:printf("/****************************************\n");
        1:   29:printf("/***********   BUG 8 TEST   *************\n");
        1:   30:printf("/****************************************\n");
        -:   31:
        -:   32:
        1:   33:printf("\n");
        1:   34:printf("I found bug #8 to be similar to bug #6 in that I spent a lot of time debugging it before concluding that there is, in fact, no bug.\n");
        1:   35:printf("The full write-up can be found in Part A, but a synopsis is below:\n");
        -:   36:
        1:   37:printf("\n");
        -:   38:
        1:   39:printf("The bug thread states that 'the updateCoins function is causing a bug by simply giving the player 5 coins.'\n");
        1:   40:printf("The argument is that the bonus 'gets overwritten by the updateCoins function unless its given the correct coin_bonus from playCard'.\n");
        1:   41:printf("However, this is based on a misunderstanding of updateCoins() and bonus coins. Bonus coins are not meant to be persistent.\n");
        1:   42:printf("Rather, they are given per-turn, and reset at the end of each turn. They are intended to exist for the duration of a turn.\n");
        1:   43:printf("In Baron, for example, the four coins are given by adding four coins to the state. This is the exact end result of calling updateCoins.\n");
        1:   44:printf("Then, the fact that the updateCoins function wipes the coins from the state is NOT a bug, but the proper course of action for the game.\n");
        1:   45:printf("This entirely negates the bug as listed in the bug thread. There is no bug with updateCoins in cardEffect.\n");
        -:   46:
        -:   47:
        -:   48:/*
        -:   49:int currentPlayer = 0;
        -:   50:
        -:   51:struct gameState G;
        -:   52:
        -:   53:int * k = kingdomCards(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        -:   54:
        -:   55:initializeGame (2, k, 8, &G);
        -:   56:
        -:   57:G.whoseTurn = currentPlayer;
        -:   58:
        -:   59://feast == 9;
        -:   60:
        -:   61:G.hand[currentPlayer][0] = baron;
        -:   62:
        -:   63:updateCoins(currentPlayer, &G, 0);
        -:   64:
        -:   65:int coinStorage = G.coins;
        -:   66:
        -:   67:
        -:   68:printf("\n");
        -:   69:printf("Testing gaining bonus coins....\n");
        -:   70://int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:   71:playCard(0, 0, 0, 0, &G);
        -:   72://cardEffect(9, 15, 0, 0, &G, 0, 0);
        -:   73:
        -:   74:int currentCoin = G.coins;
        -:   75:
        -:   76:assertCoins(coinStorage, currentCoin);
        -:   77:*/
        -:   78:
        1:   79:printf("\n");
        1:   80:printf("\n");
        1:   81:printf("\n");
        -:   82:
        1:   83:return 0;
        -:   84:};
