        -:    0:Source:bug9unittest.c
        -:    0:Graph:bug9unittest.gcno
        -:    0:Data:bug9unittest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*************************************************
        -:    2:* FileName: bug7unittest.c
        -:    3:* Author:	Glen Gougeon
        -:    4:* Class:	CS362 Software Engineering II
        -:    5:* Created:	11-30-2019
        -:    6:* Last Mod:	12-1-2019
        -:    7:*
        -:    8:* Assignement: Final Project Part B/
        -:    9:*
        -:   10:* Description:	Unit Test for Bug 9:
        -:   11:*				TributeRevealedCards Illegal Action Gain
        -:   12:*
        -:   13:**************************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <math.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <string.h>
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "interface.h"
        -:   22:#include "rngs.h"
        -:   23:
        -:   24:// TEST PROTO-TYPES
        -:   25:void initTestGame(int numPlayers, int* kDeck, int mySeed, struct gameState* game);
        -:   26:
        -:   27:// sets variable states and calls 'cardEffect' w/ 'tribute' as card
        -:   28:void subTestTribute(
        -:   29:	int testNo,
        -:   30:	char* message,
        -:   31:	struct gameState* oldState,
        -:   32:	struct gameState* newState,
        -:   33:	int newHandSize,
        -:   34:	int tribute_index,
        -:   35:	int cardInDeck
        -:   36:);
        -:   37:
        -:   38:// must be called after subTestTribute
        -:   39:void runAsserts(
        -:   40:	struct gameState* before, 
        -:   41:	struct gameState* after 
        -:   42:);
        -:   43:
        -:   44:// HELPER PROTOS-TYPES
        -:   45:void emptyDeck(int player, struct gameState* state);
        -:   46:void emptyPlayedCards(struct gameState* state);
        -:   47:void emptyDiscard(int player, struct gameState* state);
        -:   48:
        -:   49:// HAND RELATED PROTO-TYPES
        -:   50:void emptyHand(int player, struct gameState* dState);
        -:   51:void setNewHandCount(int player, struct gameState* state, int newHandSize);
        -:   52:void setAtHandPos(int player, struct gameState* state, int card, int handPos);
        -:   53:
function main called 1 returned 100% blocks executed 100%
        -:   54:int main()
        -:   55:{
        1:   56:	printf("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n");
        1:   57:	printf("*** START Bug9 Unit Test: TributeRevealedCards Illegal Action Gain ***\n");
        1:   58:	printf("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\n");
        -:   59:
        1:   60:	int kingdomCards[10] = { adventurer, ambassador, baron, curse, estate, tribute, minion, mine, gardens, remodel };
        -:   61:
        -:   62:	struct gameState G;
        -:   63:	struct gameState backup;
        -:   64:
        1:   65:	int seed = 1;
        1:   66:	int numPlayers = 2;
        -:   67:	//int currentPlayer = 0;
        1:   68:	int newHandSize = 1;
        1:   69:	int tribute_index = 0; // handPos tribute .. not really used
        1:   70:	int cardInDeck = -1;
        1:   71:	char* test_1_message = "Place 2 treasures at top of next player's deck, then call tribute.";
        1:   72:	char* test_2_message = "Place 2 Victory cards at top of next player's deck, then call tribute.";
        1:   73:	char* test_3_message = "Place 2 non-coin & non-victory (curses) at top of next player's deck, then call tribute.";
        -:   74:
        -:   75:	// SUBTEST 1 -- 2 treasure cards
        1:   76:	initTestGame(numPlayers, kingdomCards, seed, &G);
        1:   77:	cardInDeck = gold;
        1:   78:	subTestTribute(1, test_1_message, &backup, &G, newHandSize, tribute_index, cardInDeck);
        1:   79:	runAsserts(&backup,&G);
        1:   80:	printf("------------------------------------------------------------------------------------\n");
        -:   81:
        -:   82:	// SUBTEST 2 -- 2 victory cards
        1:   83:	initTestGame(numPlayers, kingdomCards, seed, &G);
        1:   84:	cardInDeck = estate;
        1:   85:	subTestTribute(2, test_2_message, &backup, &G, newHandSize, tribute_index, cardInDeck);
        1:   86:	runAsserts(&backup, &G);
        1:   87:	printf("------------------------------------------------------------------------------------\n");
        -:   88:
        -:   89:	// SUBTEST 3 -- 2 non-coin, non-victory cards
        1:   90:	initTestGame(numPlayers, kingdomCards, seed, &G);
        1:   91:	cardInDeck = curse;
        1:   92:	subTestTribute(3, test_3_message, &backup, &G, newHandSize, tribute_index, cardInDeck);
        1:   93:	runAsserts(&backup, &G);
        1:   94:	printf("------------------------------------------------------------------------------------\n");
        -:   95:
        1:   96:	return 0;
        -:   97:}
        -:   98:
        -:   99:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  100:/* *** FUNCTION SPECIFICATIONS ***																	*/
        -:  101:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  102:
        -:  103:/* This function adds memset initialization, and prints error if fail  */
function initTestGame called 3 returned 100% blocks executed 75%
        -:  104:void initTestGame(int numPlayers, int* kDeck, int mySeed, struct gameState* game)
        -:  105:{
        3:  106:	memset(game, '\0', sizeof(struct gameState));   // clear mem of 
        -:  107:
        3:  108:	int checkInit = initializeGame(numPlayers, kDeck, mySeed, game); // initialize 2 player game 
        -:  109:
        3:  110:	if (checkInit == -1)
branch  0 taken 0%
branch  1 taken 100%
        -:  111:	{
    #####:  112:		printf("Bad game initialization.\n");
    #####:  113:	}
        -:  114:
        3:  115:}
        -:  116:
        -:  117:// set player to remove all cards from current player's deck  
function emptyDeck called 6 returned 100% blocks executed 100%
        -:  118:void emptyDeck(int player, struct gameState* state)
        -:  119:{
        6:  120:	int i = 0;
      102:  121:	while (i < state->deckCount[player])
branch  0 taken 88%
branch  1 taken 12%
        -:  122:	{
       45:  123:		state->deck[player][i] = -1;
       45:  124:		i++;
        -:  125:	}
        6:  126:	state->deckCount[player] = 0;
        6:  127:}
        -:  128:
        -:  129:// set player to remove all cards from current player's deck   
function emptyPlayedCards called 6 returned 100% blocks executed 80%
        -:  130:void emptyPlayedCards(struct gameState* state)
        -:  131:{
        6:  132:	int i = 0;
       12:  133:	while (i < state->playedCardCount)
branch  0 taken 0%
branch  1 taken 100%
        -:  134:	{
    #####:  135:		state->playedCards[i] = -1;
    #####:  136:		i++;
        -:  137:	}
        6:  138:	state->playedCardCount = 0;
        6:  139:}
        -:  140:
        -:  141:// eliminate all cards from discard.   
function emptyDiscard called 6 returned 100% blocks executed 80%
        -:  142:void emptyDiscard(int player, struct gameState* state)
        -:  143:{
        6:  144:	int i = 0;
       12:  145:	while (i < state->discardCount[player])
branch  0 taken 0%
branch  1 taken 100%
        -:  146:	{
    #####:  147:		state->discard[player][i] = -1;
    #####:  148:		i++;
        -:  149:	}
        6:  150:	state->discardCount[player] = 0;
        6:  151:}
        -:  152:
        -:  153:/* Sets current player's handCount to newHandSize, then
        -:  154:	overwrites everything in hand with -1 */
function emptyHand called 6 returned 100% blocks executed 100%
        -:  155:void emptyHand(int player, struct gameState* state)
        -:  156:{
        -:  157:	int i;
       42:  158:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  159:	{
       15:  160:		state->hand[player][i] = -1;
       15:  161:	}
        6:  162:	state->handCount[player] = 0;
        6:  163:}
        -:  164:
        -:  165:// sets handCount of player to newHandSize
function setNewHandCount called 3 returned 100% blocks executed 100%
        -:  166:void setNewHandCount(int player, struct gameState* state, int newHandSize)
        -:  167:{
        3:  168:	state->handCount[player] = newHandSize;
        3:  169:}
        -:  170:
        -:  171:// adds indicated card in current player's hand at handPos 
function setAtHandPos called 3 returned 100% blocks executed 100%
        -:  172:void setAtHandPos(int player, struct gameState* state, int card, int handPos)
        -:  173:{
        3:  174:	state->hand[player][handPos] = card;
        3:  175:}
        -:  176:
        -:  177:// Use for running subtest on 'tribute' case of 'cardEffect' function
function subTestTribute called 3 returned 100% blocks executed 100%
        -:  178:void subTestTribute(
        -:  179:	// parameters
        -:  180:	int testNo,
        -:  181:	char* message,
        -:  182:	struct gameState* oldState, 
        -:  183:	struct gameState* newState, 
        -:  184:	int newHandSize, 
        -:  185:	int tribute_index, 
        -:  186:	int cardInDeck)
        -:  187:	// end paramaters
        -:  188:{
        3:  189:	printf(" SUB-TEST %d: %s\n\n", testNo, message);
        -:  190:
        -:  191:	/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  192:	/* ** SETUP TEST SECTION ** */
        -:  193:	/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  194:
        3:  195:	int idxOfChoice1 = 0; // choice1 tribute
        3:  196:	int blank = -1;
        3:  197:	int coinBonus = 0;
        3:  198:	int currentPlayer = newState->whoseTurn;
        3:  199:	int nextPlayer = currentPlayer + 1;
        -:  200:
        -:  201:	/* MMMMMMMMM SET UP CURRENT PLAYER *** MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/
        -:  202:
        -:  203:	// empty every deck currentPlayer has
        3:  204:	emptyDeck(currentPlayer, newState);
        3:  205:	emptyPlayedCards(newState); // req'd. b/c 'discardCard' is broken !!
        3:  206:	emptyDiscard(currentPlayer, newState);
        3:  207:	emptyHand(currentPlayer, newState);
        -:  208:
        -:  209:	// set up new hand size after empty
        3:  210:	setNewHandCount(currentPlayer, newState, newHandSize);
        -:  211:
        -:  212:	// place tribute card in hand
        3:  213:	setAtHandPos(currentPlayer, newState, tribute, tribute_index);
        -:  214:
        -:  215:	// set coins appropriately
        3:  216:	updateCoins(currentPlayer, newState, coinBonus);
        -:  217:
        -:  218:	/* MMMMMMMMM SET UP NEXT PLAYER *** MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/
        -:  219:
        -:  220:	// empty every deck currentPlayer has
        3:  221:	emptyDeck(nextPlayer, newState);
        3:  222:	emptyPlayedCards(newState); // req'd. b/c 'discardCard' is broken !!
        3:  223:	emptyDiscard(nextPlayer, newState);
        3:  224:	emptyHand(nextPlayer, newState);
        -:  225:	
        -:  226:	// subtest 1 = ensure only 2 golds are in next player's hand
        -:  227:	// subtest 2 = ensure only 2 victory cards are in next player's hand
        -:  228:	// subtest 3 = ensure only 2 action cards are in next player's hand
        -:  229:	// subtest 4 = ensure only 2..
        -:  230:	//			   non-treasure, non-victory, non-action cards are in next player's hand
        -:  231:
        -:  232:	// empty supply of cardInDeck to ensure the ones 
        -:  233:	// going into deck are the only ones possible
        3:  234:	newState->supplyCount[cardInDeck] = 0;
        -:  235:
        -:  236:	// place 2 cards in nextPlayer's deck then increment
        3:  237:	newState->deck[nextPlayer][newState->deckCount[nextPlayer]] = cardInDeck;
        3:  238:	newState->deckCount[nextPlayer]++;
        3:  239:	newState->deck[nextPlayer][newState->deckCount[nextPlayer]] = cardInDeck;
        3:  240:	newState->deckCount[nextPlayer]++;
        -:  241:
        -:  242:	/* BACK UP STATE BEFORE CALL */
        3:  243:	memset(oldState, '\0', sizeof(*oldState));
        3:  244:	oldState = newState;
        -:  245:
        -:  246:	/* CALL TO TRIBUTE <-----------------------------------------------------*/
        3:  247:	cardEffect(tribute, idxOfChoice1, blank, blank, newState, tribute_index, &coinBonus);
        -:  248:
        3:  249:}
        -:  250:
        -:  251:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  252:/* ** ASSERTS SECTION ** */
        -:  253:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
function runAsserts called 3 returned 100% blocks executed 47%
        -:  254:void runAsserts(struct gameState* before, struct gameState* after)
        -:  255:{
        3:  256:	int currentPlayer = after->whoseTurn;
        3:  257:	int nextPlayer = currentPlayer +1;
        -:  258:
        -:  259:	char name[MAX_STRING_LENGTH];
        -:  260:	char nombre[MAX_STRING_LENGTH];
        -:  261:
        -:  262:	/*Assert that the top 2 cards from the next player's previous deck
        -:  263:	are exactly the ones found in their discard (playedCards) after the use of tribute.*/
        3:  264:	if (before->deck[nextPlayer][before->deckCount[nextPlayer] - 1] != after->discard[nextPlayer][after->discardCount[nextPlayer] - 1])
branch  0 taken 0%
branch  1 taken 100%
        -:  265:	{
    #####:  266:		if (before->deck[nextPlayer][before->deckCount[nextPlayer] - 2] != after->discard[nextPlayer][after->discardCount[nextPlayer] - 2])
branch  0 never executed
branch  1 never executed
        -:  267:		{
    #####:  268:			memset(name, '\0', sizeof name);
    #####:  269:			cardNumToName(after->discard[nextPlayer][after->discardCount[nextPlayer] - 1], name);
        -:  270:
    #####:  271:			memset(nombre, '\0', sizeof nombre);
    #####:  272:			cardNumToName(after->discard[nextPlayer][after->discardCount[nextPlayer] - 1], nombre);
        -:  273:
    #####:  274:			printf("Tribute Error: previous top 2 deck cards next player..\n");
    #####:  275:			printf("               not found in next player's discard.\n\n");
    #####:  276:			printf("               Discard top 2:\n");
    #####:  277:			printf("               G.discard[%d]: %s\n", after->discardCount[nextPlayer] - 1, name);
    #####:  278:			printf("               G.discard[%d]: %s\n\n", after->discardCount[nextPlayer] - 2, nombre);
    #####:  279:		}
    #####:  280:	}
        -:  281:
        -:  282:	/*Assert that the counts of the next player's discard and deck counts
        -:  283:	are correct, such that their deckCount is 2 less than previously, and
        -:  284:	their discardCount is 2 greater than previously.*/
        3:  285:	if (before->deckCount[nextPlayer] - 2 != after->deckCount[nextPlayer])
branch  0 taken 0%
branch  1 taken 100%
        -:  286:	{
    #####:  287:		if (before->discardCount[nextPlayer] + 2 != after->discardCount[nextPlayer])
branch  0 never executed
branch  1 never executed
        -:  288:		{
    #####:  289:			printf("Tribute Error: next player's deckCount not -2 previous.\n");
    #####:  290:			printf("             : next player's discardCount not +2 previous.\n\n");
        -:  291:
    #####:  292:		}
    #####:  293:	}
        -:  294:
        -:  295:	/*Assert if one of the top 2 cards in the next player's discard
        -:  296:	are a coin, that the current player's coin is exactly 2 greater than previously.
        -:  297:	for each treasure in discard*/
        3:  298:	int totalCoin = 0;
        6:  299:	if (after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == copper ||
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        3:  300:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == silver ||
branch  0 taken 100%
branch  1 taken 0%
        3:  301:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == gold) {
        -:  302:
        -:  303:		// 1 treasure found
    #####:  304:		totalCoin += 2;
        -:  305:
    #####:  306:		if (after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == copper ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  307:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == silver ||
branch  0 never executed
branch  1 never executed
    #####:  308:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == gold) {
        -:  309:
        -:  310:			// 2nd treasure found
    #####:  311:			totalCoin += 2;
    #####:  312:		}
    #####:  313:	}
        -:  314:
        3:  315:	if (totalCoin == 2)
branch  0 taken 0%
branch  1 taken 100%
        -:  316:	{
    #####:  317:		if (before->coins + 2 != after->coins)
branch  0 never executed
branch  1 never executed
        -:  318:		{
    #####:  319:			printf("Tribute Error: You had 1 treasure in discard, but didn't gain 2 coin.\n\n");
    #####:  320:		}
    #####:  321:	}
        3:  322:	else if (totalCoin == 4)
branch  0 taken 0%
branch  1 taken 100%
        -:  323:	{
    #####:  324:		if (before->coins + 4 != after->coins)
branch  0 never executed
branch  1 never executed
        -:  325:		{
    #####:  326:			printf("Tribute Error: You had 2 treasures in discard, but didn't gain 4 coin.\n\n");
    #####:  327:		}
    #####:  328:	}
        -:  329:	/*Assert that if the current player's coin went up by 2 from previous, that
        -:  330:	the next player's top 2 discarded cards are a coin, otherwise print a message*/
        6:  331:	else if (totalCoin == 0 && (before->coins != after->coins))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 33%
branch  3 taken 67%
        -:  332:	{
        1:  333:		printf("Tribute Error: You gained coin, but didn't find a treasure in discard.\n\n");
        1:  334:	}
        -:  335:
        -:  336:	/*Assert if one of the top 2 cards in the next player's discard
        -:  337:	are a victory card, that the current player's handCount is 2 greater than previously.*/
        3:  338:	int totalVictory = 0;
        6:  339:	if (after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == estate ||
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        3:  340:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == gardens) {
        -:  341:
        -:  342:		// 1 treasure found
    #####:  343:		totalVictory += 2;
        -:  344:
    #####:  345:		if (after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == estate ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  346:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == gardens) {
        -:  347:
        -:  348:			// 2nd treasure found
    #####:  349:			totalVictory += 2;
    #####:  350:		}
    #####:  351:	}
        -:  352:
        3:  353:	if (totalVictory == 2)
branch  0 taken 0%
branch  1 taken 100%
        -:  354:	{
    #####:  355:		if (before->handCount[nextPlayer] + 2 != after->handCount[nextPlayer])
branch  0 never executed
branch  1 never executed
        -:  356:		{
    #####:  357:			printf("Tribute Error: You had 1 Victory card in discard, but didn't gain 2 card.\n\n");
    #####:  358:		}
    #####:  359:	}
        3:  360:	else if (totalVictory == 4)
branch  0 taken 0%
branch  1 taken 100%
        -:  361:	{
    #####:  362:		if (before->handCount[nextPlayer] + 4 != after->handCount[nextPlayer])
branch  0 never executed
branch  1 never executed
        -:  363:		{
    #####:  364:			printf("Tribute Error: You had 2 Victory card in discard, but didn't gain 4 cards.\n\n");
    #####:  365:		}
    #####:  366:	}
        -:  367:	/*Assert that if the current player's hand count went up by 2 from previous, that
        -:  368:	the next player's top 2 discarded cards are a victory card.*/
        6:  369:	else if (totalVictory == 0 && (before->handCount[nextPlayer] != after->handCount[nextPlayer]))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  370:	{
    #####:  371:		printf("Tribute Error: You gained cards in hand, but didn't find a Victory card in discard.\n\n");
    #####:  372:	}
        -:  373:
        -:  374:	// This will catch the error.
        -:  375:	/*Assert that if the current player's numActions went up by 2 from previous, that
        -:  376:	the next player's top 2 discarded cards are an action card, otherwise print a message*/
        -:  377:
        3:  378:	int totalActions = 0;
        6:  379:	if (after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == adventurer ||
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        3:  380:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == baron ||
branch  0 taken 100%
branch  1 taken 0%
        3:  381:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == tribute ||
branch  0 taken 100%
branch  1 taken 0%
        3:  382:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == minion ||
branch  0 taken 100%
branch  1 taken 0%
        3:  383:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == mine ||
branch  0 taken 100%
branch  1 taken 0%
        3:  384:		after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == remodel) {
        -:  385:
        -:  386:		// 1 action found
    #####:  387:		totalActions += 2;
        -:  388:
    #####:  389:		if (after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == adventurer ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  390:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == baron ||
branch  0 never executed
branch  1 never executed
    #####:  391:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == tribute ||
branch  0 never executed
branch  1 never executed
    #####:  392:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == minion ||
branch  0 never executed
branch  1 never executed
    #####:  393:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == mine ||
branch  0 never executed
branch  1 never executed
    #####:  394:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == remodel) {
        -:  395:
        -:  396:			// 2nd actions found
    #####:  397:			totalActions += 4;
    #####:  398:		}
    #####:  399:	}
        -:  400:
        3:  401:	if (totalActions == 2)
branch  0 taken 0%
branch  1 taken 100%
        -:  402:	{
    #####:  403:		if (before->numActions + 2 != after->numActions)
branch  0 never executed
branch  1 never executed
        -:  404:		{
    #####:  405:			printf("Tribute Error: You had 1 action card in discard, but didn't gain 2 actions.\n\n");
    #####:  406:		}
    #####:  407:	}
        3:  408:	else if (totalActions == 4)
branch  0 taken 0%
branch  1 taken 100%
        -:  409:	{
    #####:  410:		if (before->numActions + 4 != after->numActions)
branch  0 never executed
branch  1 never executed
        -:  411:		{
    #####:  412:			printf("Tribute Error: You had 2 action cards in discard, but didn't gain 4 actions.\n\n");
    #####:  413:		}
    #####:  414:	}
        6:  415:	else if (totalActions == 0 && (before->numActions != after->numActions))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
        -:  416:	{
        3:  417:		printf("Tribute Error: You gained actions, but didn't find any action cards in discard.\n\n");
        3:  418:	}
        -:  419:
        -:  420:	/*Assert that if the current player's hand count went up 2 from previous, that
        -:  421:	the next player's top 2 discarded cards are a victory card.
        -:  422:		If so compare the hands to see that the contents of the current player's hand
        -:  423:		is no the same as before.Use a for loop for i in G.handCount[currentPlayer],
        -:  424:		and compare contents.Any difference should break out of loop, set a print flag,
        -:  425:		and print the error.*/
        3:  426:	if (after->handCount[currentPlayer] > before->handCount[currentPlayer])
branch  0 taken 100%
branch  1 taken 0%
        -:  427:	{
        3:  428:		if ((after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] != estate ||
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  429:		     after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] != estate) &&
branch  0 never executed
branch  1 never executed
        3:  430:		    (after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] != gardens ||
branch  0 taken 0%
branch  1 taken 100%
    #####:  431:			after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] != gardens) ){
        -:  432:
        -:  433:				// Then your handCount increased withou having a Victory card
        3:  434:				printf("Tribute Error: Your hand increased but..\n");
        3:  435:				printf("             : top 2 cards in next player's discard weren't Victory cards.\n\n");
        3:  436:			}
        3:  437:	}
        3:  438:}
