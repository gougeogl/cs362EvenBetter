        -:    0:Source:bug10unittest.c
        -:    0:Graph:bug10unittest.gcno
        -:    0:Data:bug10unittest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function assertAmbassadorCard called 1 returned 100% blocks executed 80%
        -:    8:void assertAmbassadorCard(int card, int choice1, int choice2, int choice3, struct gameState *G, int handPos, int *bonus) {
        -:    9:    
        -:   10:    // Assertion
        1:   11:    if (cardEffect(card, choice1, choice2, choice3, G, handPos, bonus) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:        printf("Choice and # of cards to return to supply determined as valid. No errors.\n\n");
    #####:   13:    }
        -:   14:    else {
        1:   15:        printf("Choice and # of cards to return to supply determined as invalid. Error encountered.\n\n");
        -:   16:    }
        1:   17:}
        -:   18: 
function main called 1 returned 100% blocks executed 100%
        -:   19:int main () {
        1:   20:    int numPlayers = 2;
        1:   21:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   22:           , remodel, smithy, village, baron, great_hall};   
        1:   23:    int seed = 10; 
        -:   24:    struct gameState G;
        -:   25:    int initResult;
        1:   26:    int handCount = 4;
        1:   27:    int cards[handCount];
        1:   28:    int currentPlayer = 0;
        -:   29:
        -:   30:    // Argument variables for cardEffect()
        -:   31:    int card;
        -:   32:    int choice1;
        -:   33:    int choice2;
        -:   34:    int choice3;
        -:   35:    int handPos;
        -:   36:    int *bonus;
        -:   37:
        1:   38:    printf("\n\nBegin Testing Ambassador cardEffect:\n");
        -:   39:
        1:   40:    memset(&G, 23, sizeof(struct gameState)); 
        -:   41:
        1:   42:    initResult = initializeGame(numPlayers, k, seed, &G);
        -:   43:
        -:   44:    // Proceed if game initialization successful
        1:   45:    if (initResult == 0) {    
branch  0 taken 100%
branch  1 taken 0%
        -:   46:
        -:   47:        // Set hand and hand count for all players
        6:   48:        for (int i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33%
        2:   49:            G.handCount[i] = handCount;
        2:   50:            memcpy(G.hand[i], cards, sizeof(int) * handCount);  
        2:   51:        }
        -:   52:
        -:   53:        // Manually set the cards in the first player's hand
        1:   54:        G.hand[currentPlayer][0] = ambassador;
        1:   55:        G.hand[currentPlayer][1] = baron;
        1:   56:        G.hand[currentPlayer][2] = gold;
        1:   57:        G.hand[currentPlayer][3] = baron;
        -:   58:
        -:   59:        // Set turn to first player
        1:   60:        G.whoseTurn = currentPlayer;
        -:   61:
        -:   62:        // Set arguments so that current player will choose 
        -:   63:        // to return 2 baron cards to the supply
        1:   64:        card = ambassador;
        1:   65:        choice1 = 1;        // Index of card to reveal
        1:   66:        choice2 = 2;        // Number (up to 2) to return to supply
        1:   67:        choice3 = 0;        // Unused
        1:   68:        handPos = 0;        // Position of ambassador card
        1:   69:        bonus = NULL;       // Unused
        -:   70:
        1:   71:        assertAmbassadorCard(card, choice1, choice2, choice3, &G, handPos, bonus);
        1:   72:    }          
        -:   73:                                        
        1:   74:    return 0;
        1:   75:}
