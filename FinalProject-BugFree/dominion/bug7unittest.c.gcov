        -:    0:Source:bug7unittest.c
        -:    0:Graph:bug7unittest.gcno
        -:    0:Data:bug7unittest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*************************************************
        -:    2:* FileName: bug7unittest.c
        -:    3:* Author:	Glen Gougeon
        -:    4:* Class:	CS362 Software Engineering II
        -:    5:* Created:	11-30-2019
        -:    6:* Last Mod:	12-2-2019
        -:    7:*
        -:    8:* Assignement: Final Project Part B/
        -:    9:*
        -:   10:* Description:	Unit Test for Bug 7:
        -:   11:*				TributeRevealedCards Buffer-OverRun
        -:   12:*
        -:   13:**************************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <math.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <string.h>
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "interface.h"
        -:   22:#include "rngs.h"
        -:   23:
        -:   24:// TEST PROTO-TYPES
        -:   25:void initTestGame(int numPlayers, int* kDeck, int mySeed, struct gameState* game);
        -:   26:
        -:   27:// sets variable states and calls 'cardEffect' w/ 'tribute' as card
        -:   28:void subTestTribute(
        -:   29:	int testNo,
        -:   30:	char* message,
        -:   31:	struct gameState* oldState,
        -:   32:	struct gameState* newState,
        -:   33:	int newHandSize,
        -:   34:	int tribute_index,
        -:   35:	int cardInDeck
        -:   36:);
        -:   37:
        -:   38:// must be called after subTestTribute
        -:   39:void runAsserts(
        -:   40:	struct gameState* before, 
        -:   41:	struct gameState* after 
        -:   42:);
        -:   43:
        -:   44:// HELPER PROTOS-TYPES
        -:   45:void emptyDeck(int player, struct gameState* state);
        -:   46:void emptyPlayedCards(struct gameState* state);
        -:   47:void emptyDiscard(int player, struct gameState* state);
        -:   48:
        -:   49:// HAND RELATED PROTO-TYPES
        -:   50:void emptyHand(int player, struct gameState* dState);
        -:   51:void setNewHandCount(int player, struct gameState* state, int newHandSize);
        -:   52:void setAtHandPos(int player, struct gameState* state, int card, int handPos);
        -:   53:
function main called 1 returned 100% blocks executed 100%
        -:   54:int main()
        -:   55:{
        1:   56:	printf("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n");
        1:   57:	printf("*** START Bug7 Unit Test: TributeRevealedCards Buffer-OverRun ***\n");
        1:   58:	printf("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n");
        -:   59:
        1:   60:	int kingdomCards[10] = { adventurer, ambassador, baron, curse, estate, tribute, minion, mine, gardens, remodel };
        -:   61:
        -:   62:	struct gameState G;
        -:   63:	struct gameState backup;
        -:   64:
        1:   65:	int seed = 1;
        1:   66:	int numPlayers = 2;
        -:   67:	//int currentPlayer = 0;
        1:   68:	int newHandSize = 1;
        1:   69:	int tribute_index = 0; // handPos tribute .. not really used
        1:   70:	int cardInDeck = -1;
        1:   71:	char* test_1_message = "Place 2 treasures at top of next player's deck, then call tribute.";
        1:   72:	char* test_2_message = "Place 2 Victory cards at top of next player's deck, then call tribute.";
        1:   73:	char* test_3_message = "Place 2 Action cards at top of next player's deck, then call tribute.";
        1:   74:	char* test_4_message = "Place 2 Curses at top of next player's deck, then call tribute.";
        -:   75:
        -:   76:	// SUBTEST 1 -- 2 treasure cards
        1:   77:	initTestGame(numPlayers, kingdomCards, seed, &G);
        1:   78:	G.numActions = 0;
        1:   79:	cardInDeck = gold;
        1:   80:	subTestTribute(1, test_1_message, &backup, &G, newHandSize, tribute_index, cardInDeck);
        1:   81:	runAsserts(&backup,&G);
        1:   82:	printf("------------------------------------------------------------------------------------\n");
        -:   83:
        -:   84:	// SUBTEST 2 -- 2 victory cards
        1:   85:	initTestGame(numPlayers, kingdomCards, seed, &G);
        1:   86:	G.numActions = 0;
        1:   87:	cardInDeck = estate;
        1:   88:	subTestTribute(2, test_2_message, &backup, &G, newHandSize, tribute_index, cardInDeck);
        1:   89:	runAsserts(&backup, &G);
        1:   90:	printf("------------------------------------------------------------------------------------\n");
        -:   91:
        -:   92:	// SUBTEST 3 -- 2 action cards
        1:   93:	initTestGame(numPlayers, kingdomCards, seed, &G);
        1:   94:	G.numActions = 0;
        1:   95:	cardInDeck = adventurer;
        1:   96:	subTestTribute(3, test_3_message, &backup, &G, newHandSize, tribute_index, cardInDeck);
        1:   97:	runAsserts(&backup, &G);
        1:   98:	printf("------------------------------------------------------------------------------------\n");
        -:   99:
        -:  100:	// SUBTEST 4 -- 2 curse cards
        1:  101:	initTestGame(numPlayers, kingdomCards, seed, &G);
        1:  102:	G.numActions = 0;
        1:  103:	cardInDeck = curse;
        1:  104:	subTestTribute(4, test_4_message, &backup, &G, newHandSize, tribute_index, cardInDeck);
        1:  105:	runAsserts(&backup, &G);
        -:  106:
        1:  107:	return 0;
        -:  108:}
        -:  109:
        -:  110:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  111:/* *** FUNCTION SPECIFICATIONS ***																	*/
        -:  112:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  113:
        -:  114:/* This function adds memset initialization, and prints error if fail  */
function initTestGame called 4 returned 100% blocks executed 75%
        -:  115:void initTestGame(int numPlayers, int* kDeck, int mySeed, struct gameState* game)
        -:  116:{
        4:  117:	memset(game, '\0', sizeof(struct gameState));   // clear mem of 
        -:  118:
        4:  119:	int checkInit = initializeGame(numPlayers, kDeck, mySeed, game); // initialize 2 player game 
        -:  120:
        4:  121:	if (checkInit == -1)
branch  0 taken 0%
branch  1 taken 100%
        -:  122:	{
    #####:  123:		printf("Bad game initialization.\n");
    #####:  124:	}
        -:  125:
        4:  126:}
        -:  127:
        -:  128:// set player to remove all cards from current player's deck  
function emptyDeck called 8 returned 100% blocks executed 100%
        -:  129:void emptyDeck(int player, struct gameState* state)
        -:  130:{
        8:  131:	int i = 0;
       96:  132:	while (i < state->deckCount[player])
branch  0 taken 83%
branch  1 taken 17%
        -:  133:	{
       40:  134:		state->deck[player][i] = -1;
       40:  135:		i++;
        -:  136:	}
        8:  137:	state->deckCount[player] = 0;
        8:  138:}
        -:  139:
        -:  140:// set player to remove all cards from current player's deck   
function emptyPlayedCards called 8 returned 100% blocks executed 80%
        -:  141:void emptyPlayedCards(struct gameState* state)
        -:  142:{
        8:  143:	int i = 0;
       16:  144:	while (i < state->playedCardCount)
branch  0 taken 0%
branch  1 taken 100%
        -:  145:	{
    #####:  146:		state->playedCards[i] = -1;
    #####:  147:		i++;
        -:  148:	}
        8:  149:	state->playedCardCount = 0;
        8:  150:}
        -:  151:
        -:  152:// eliminate all cards from discard.   
function emptyDiscard called 8 returned 100% blocks executed 80%
        -:  153:void emptyDiscard(int player, struct gameState* state)
        -:  154:{
        8:  155:	int i = 0;
       16:  156:	while (i < state->discardCount[player])
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:		state->discard[player][i] = -1;
    #####:  159:		i++;
        -:  160:	}
        8:  161:	state->discardCount[player] = 0;
        8:  162:}
        -:  163:
        -:  164:/* Sets current player's handCount to newHandSize, then
        -:  165:	overwrites everything in hand with -1 */
function emptyHand called 8 returned 100% blocks executed 100%
        -:  166:void emptyHand(int player, struct gameState* state)
        -:  167:{
        -:  168:	int i;
       96:  169:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  170:	{
       40:  171:		state->hand[player][i] = -1;
       40:  172:	}
        8:  173:	state->handCount[player] = 0;
        8:  174:}
        -:  175:
        -:  176:// sets handCount of player to newHandSize
function setNewHandCount called 4 returned 100% blocks executed 100%
        -:  177:void setNewHandCount(int player, struct gameState* state, int newHandSize)
        -:  178:{
        4:  179:	state->handCount[player] = newHandSize;
        4:  180:}
        -:  181:
        -:  182:// adds indicated card in current player's hand at handPos 
function setAtHandPos called 4 returned 100% blocks executed 100%
        -:  183:void setAtHandPos(int player, struct gameState* state, int card, int handPos)
        -:  184:{
        4:  185:	state->hand[player][handPos] = card;
        4:  186:}
        -:  187:
        -:  188:// Use for running subtest on 'tribute' case of 'cardEffect' function
function subTestTribute called 4 returned 100% blocks executed 100%
        -:  189:void subTestTribute(
        -:  190:	// parameters
        -:  191:	int testNo,
        -:  192:	char* message,
        -:  193:	struct gameState* oldState, 
        -:  194:	struct gameState* newState, 
        -:  195:	int newHandSize, 
        -:  196:	int tribute_index, 
        -:  197:	int cardInDeck)
        -:  198:	// end paramaters
        -:  199:{
        4:  200:	printf(" SUB-TEST %d: %s\n\n", testNo, message);
        -:  201:
        -:  202:	/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  203:	/* ** SETUP TEST SECTION ** */
        -:  204:	/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  205:
        4:  206:	int idxOfChoice1 = 0; // choice1 tribute
        4:  207:	int blank = -1;
        4:  208:	int coinBonus = 0;
        4:  209:	int currentPlayer = newState->whoseTurn;
        4:  210:	int nextPlayer = currentPlayer + 1;
        -:  211:
        -:  212:	/* MMMMMMMMM SET UP CURRENT PLAYER *** MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/
        -:  213:
        -:  214:	// empty every deck currentPlayer has
        4:  215:	emptyDeck(currentPlayer, newState);
        4:  216:	emptyPlayedCards(newState); // req'd. b/c 'discardCard' is broken !!
        4:  217:	emptyDiscard(currentPlayer, newState);
        4:  218:	emptyHand(currentPlayer, newState);
        -:  219:
        -:  220:	// set up new hand size after empty
        4:  221:	setNewHandCount(currentPlayer, newState, newHandSize);
        -:  222:
        -:  223:	// place tribute card in hand
        4:  224:	setAtHandPos(currentPlayer, newState, tribute, tribute_index);
        -:  225:
        -:  226:	// set coins appropriately
        4:  227:	updateCoins(currentPlayer, newState, coinBonus);
        -:  228:
        -:  229:	/* MMMMMMMMM SET UP NEXT PLAYER *** MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/
        -:  230:
        -:  231:	// empty every deck currentPlayer has
        4:  232:	emptyDeck(nextPlayer, newState);
        4:  233:	emptyPlayedCards(newState); // req'd. b/c 'discardCard' is broken !!
        4:  234:	emptyDiscard(nextPlayer, newState);
        4:  235:	emptyHand(nextPlayer, newState);
        -:  236:
        -:  237:	// subtest 1 = ensure only 2 golds are in next player's hand
        -:  238:	// subtest 2 = ensure only 2 victory cards are in next player's hand
        -:  239:	// subtest 3 = ensure only 2 action cards are in next player's hand
        -:  240:	// subtest 4 = ensure only 2..
        -:  241:	//			   non-treasure, non-victory, non-action cards are in next player's hand
        -:  242:
        -:  243:	// empty supply of cardInDeck to ensure the ones 
        -:  244:	// going into deck are the only ones possible
        4:  245:	newState->supplyCount[cardInDeck] = 0;
        -:  246:
        -:  247:	// place 2 cards in nextPlayer's deck then increment
        4:  248:	newState->deck[nextPlayer][newState->deckCount[nextPlayer]] = cardInDeck;
        4:  249:	newState->deckCount[nextPlayer]++;
        4:  250:	newState->deck[nextPlayer][newState->deckCount[nextPlayer]] = cardInDeck;
        4:  251:	newState->deckCount[nextPlayer]++;
        -:  252:
        -:  253:	/* BACK UP STATE BEFORE CALL */
        4:  254:	memset(oldState, '\0', sizeof(*oldState));
        4:  255:	oldState = newState;
        -:  256:
        -:  257:	/* CALL TO TRIBUTE <-----------------------------------------------------*/
        4:  258:	cardEffect(tribute, idxOfChoice1, blank, blank, newState, tribute_index, &coinBonus);
        -:  259:	
        4:  260:}
        -:  261:
        -:  262:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
        -:  263:/* ** ASSERTS SECTION ** */
        -:  264:/* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM */
function runAsserts called 4 returned 100% blocks executed 71%
        -:  265:void runAsserts(struct gameState* before, struct gameState* after)
        -:  266:{
        4:  267:	int currentPlayer = after->whoseTurn;
        -:  268:	//int currentPlayer = 0;
        4:  269:	int nextPlayer = currentPlayer +1;
        -:  270:
        -:  271:	char name[MAX_STRING_LENGTH];
        -:  272:	char nombre[MAX_STRING_LENGTH];
        -:  273:
        -:  274:	/*Assert that the top 2 cards from the next player's previous deck
        -:  275:	are exactly the ones found in their discard (playedCards) after the use of tribute.*/
        4:  276:	if (before->deck[nextPlayer][before->deckCount[nextPlayer]] != after->discard[nextPlayer][after->discardCount[nextPlayer]])
branch  0 taken 0%
branch  1 taken 100%
        -:  277:	{
    #####:  278:		if (before->deck[nextPlayer][before->deckCount[nextPlayer] - 2] != after->discard[nextPlayer][after->discardCount[nextPlayer] - 2])
branch  0 never executed
branch  1 never executed
        -:  279:		{
    #####:  280:			memset(name, '\0', sizeof name);
    #####:  281:			cardNumToName(after->discard[nextPlayer][after->discardCount[nextPlayer] - 1], name);
        -:  282:
    #####:  283:			memset(nombre, '\0', sizeof nombre);
    #####:  284:			cardNumToName(after->discard[nextPlayer][after->discardCount[nextPlayer] - 1], nombre);
        -:  285:
    #####:  286:			printf("Tribute Error: previous top 2 deck cards next player..\n");
    #####:  287:			printf("               not found in next player's discard.\n\n");
    #####:  288:			printf("               Discard top 2:\n");
    #####:  289:			printf("               G.discard[%d]: %s\n", after->discardCount[nextPlayer] - 1, name);
    #####:  290:			printf("               G.discard[%d]: %s\n\n", after->discardCount[nextPlayer] - 2, nombre);
    #####:  291:		}
    #####:  292:	}
        -:  293:
        -:  294:	/*Assert that the counts of the next player's discard and deck counts
        -:  295:	are correct, such that their deckCount is 2 less than previously, and
        -:  296:	their discardCount is 2 greater than previously.*/
        4:  297:	if (before->deckCount[nextPlayer] - 2 != after->deckCount[nextPlayer])
branch  0 taken 100%
branch  1 taken 0%
        -:  298:	{
        4:  299:		if (before->discardCount[nextPlayer] + 2 != after->discardCount[nextPlayer])
branch  0 taken 0%
branch  1 taken 100%
        -:  300:		{
    #####:  301:			printf("Tribute Error: next player's deckCount not -2 previous.\n");
    #####:  302:			printf("             : next player's discardCount not +2 previous.\n\n");
        -:  303:
    #####:  304:		}
        4:  305:	}
        -:  306:
        4:  307:	int totalActions = 0;
        7:  308:	if(after->discard[nextPlayer][after->discardCount[nextPlayer] - 1] == adventurer || 
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 100%
        3:  309:          after->discard[nextPlayer][after->discardCount[nextPlayer] - 2] == adventurer ){ 
        -:  310:
        1:  311:		totalActions +=2;
        1:  312:	}
        -:  313:	
        4:  314:	if (totalActions == 2)
branch  0 taken 25%
branch  1 taken 75%
        -:  315:	{
        1:  316:		if (before->numActions + 2 != after->numActions)
branch  0 taken 0%
branch  1 taken 100%
        -:  317:		{
        -:  318:			//printf("TRACE: totalActions %d\n", totalActions);
    #####:  319:			printf("Tribute Error: You had 1 action card in discard, but didn't gain 2 actions.\n\n");
    #####:  320:		}
        1:  321:	}
        6:  322:	else if (totalActions == 0 && (before->numActions != after->numActions))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  323:	{
        -:  324:		//printf("TRACE: totalActions %d\n", totalActions);
        -:  325:		//printf("TRACE: before->numActions %d, after->numActions %d\n", before->numActions, after->numActions);
    #####:  326:		printf("Tribute Error: You gained actions, but didn't find any action cards in discard.\n\n");
    #####:  327:	}
        4:  328:}
        -:  329:
