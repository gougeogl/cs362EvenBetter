        -:    0:Source:bug4unittest.c
        -:    0:Graph:bug4unittest.gcno
        -:    0:Data:bug4unittest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function assertGameOver called 1 returned 100% blocks executed 80%
        -:    8:void assertGameOver(struct gameState *G) {
        -:    9:    
        -:   10:    // Assertion
        1:   11:    if (isGameOver(G) == 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:        printf("Game over status is correctly detected for 3 empty piles. No errors.\n\n");
    #####:   13:    }
        -:   14:    else {
        1:   15:        printf("Game over status is incorrectly detected for 3 empty piles. Error detected.\n\n");
        -:   16:    }  
        1:   17:}
        -:   18: 
function main called 1 returned 100% blocks executed 100%
        -:   19:int main () {
        1:   20:    int numPlayers = 2;
        1:   21:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   22:           , remodel, smithy, village, baron, great_hall};   
        1:   23:    int seed = 10; 
        -:   24:    struct gameState G;
        -:   25:    int initResult;
        -:   26:
        1:   27:    printf("\n\nBegin Testing isGameOver():\n");
        -:   28:
        1:   29:    memset(&G, 23, sizeof(struct gameState)); 
        -:   30:
        1:   31:    initResult = initializeGame(numPlayers, k, seed, &G);
        -:   32:
        -:   33:    // Proceed if game initialization successful
        1:   34:    if (initResult == 0) {    
branch  0 taken 100%
branch  1 taken 0%
        -:   35:        // Set supply counts
       50:   36:        for (int i = 0; i < 24; i++) {
branch  0 taken 96%
branch  1 taken 4%
       24:   37:            G.supplyCount[i] = i + 1;
       24:   38:        }
        -:   39:
        -:   40:        // Manually set supply count for last 3 cards
        1:   41:        G.supplyCount[24] = 0;
        1:   42:        G.supplyCount[25] = 0;
        1:   43:        G.supplyCount[26] = 0;
        -:   44:        
        1:   45:        assertGameOver(&G);
        1:   46:    }          
        -:   47:                                        
        1:   48:    return 0;
        -:   49:}
